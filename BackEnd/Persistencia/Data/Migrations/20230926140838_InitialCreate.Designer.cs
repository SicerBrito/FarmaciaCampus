// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistencia.Data;

#nullable disable

namespace Persistencia.Data.Migrations
{
    [DbContext(typeof(DbAppContext))]
    [Migration("20230926140838_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Dominio.Entities.CargoEmpleado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdCargoEmpleado")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar")
                        .HasColumnName("NombreCargo");

                    b.HasKey("Id");

                    b.ToTable("CargoEmpleado", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.CategoriaMedicamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdCategoriaMedicamento")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar")
                        .HasColumnName("NombreMedicamento");

                    b.HasKey("Id");

                    b.ToTable("CategoriaMedicamento", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Cita", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdCita")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EstadoCitaId")
                        .HasColumnType("int")
                        .HasColumnName("EstadoCita_Id");

                    b.Property<DateTime>("FechaCita")
                        .HasColumnType("DateTime")
                        .HasColumnName("FechaCita");

                    b.Property<int>("MedicoId")
                        .HasColumnType("int")
                        .HasColumnName("Medico_Id");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("Usuario_Id");

                    b.HasKey("Id");

                    b.HasIndex("EstadoCitaId");

                    b.HasIndex("MedicoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Cita", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Ciudad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdCiudad")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepartamentoId")
                        .HasColumnType("int")
                        .HasColumnName("Departamento_Id");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("NombreCiudad");

                    b.HasKey("Id");

                    b.HasIndex("DepartamentoId");

                    b.ToTable("Ciudad", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Compra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdCompra")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("FechaCompra")
                        .HasColumnType("DateTime")
                        .HasColumnName("FechaCompra");

                    b.Property<int>("MetodoDePagoId")
                        .HasColumnType("int")
                        .HasColumnName("MetodoDePago_Id");

                    b.Property<long>("NumeroFactura")
                        .HasColumnType("BIGINT")
                        .HasColumnName("NumeroFactura");

                    b.Property<int>("ProveedorId")
                        .HasColumnType("int")
                        .HasColumnName("Proveedor_Id");

                    b.HasKey("Id");

                    b.HasIndex("MetodoDePagoId");

                    b.HasIndex("ProveedorId");

                    b.ToTable("Compra", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Departamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdDepartamento")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("NombreDepartamento");

                    b.Property<int?>("PaisId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("Pais_Id");

                    b.HasKey("Id");

                    b.HasIndex("PaisId");

                    b.ToTable("Departamento", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Direccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdDireccion")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CiudadId")
                        .HasColumnType("int")
                        .HasColumnName("Ciudad_Id");

                    b.Property<int>("CodigoPostal")
                        .HasColumnType("int")
                        .HasColumnName("CodigoPostal");

                    b.Property<int>("FarmaciaId")
                        .HasColumnType("int")
                        .HasColumnName("Farmacia_Id");

                    b.Property<int>("FarmaciasId")
                        .HasColumnType("int");

                    b.Property<string>("NombreDireccion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("Direccion");

                    b.Property<int>("NroDireccion")
                        .HasColumnType("int")
                        .HasColumnName("NroDireccion");

                    b.Property<int>("TipoDireccionId")
                        .HasColumnType("int")
                        .HasColumnName("TipoDireccion_Id");

                    b.Property<int>("TipoViaId")
                        .HasColumnType("int")
                        .HasColumnName("TipoVia_Id");

                    b.HasKey("Id");

                    b.HasIndex("FarmaciaId");

                    b.HasIndex("FarmaciasId");

                    b.HasIndex("TipoDireccionId");

                    b.HasIndex("TipoViaId");

                    b.ToTable("Direccion", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Empleado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdEmpleado")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar")
                        .HasColumnName("Apellidos");

                    b.Property<int>("CargoId")
                        .HasColumnType("int")
                        .HasColumnName("Cargo_Id");

                    b.Property<int>("FarmaciaId")
                        .HasColumnType("int")
                        .HasColumnName("Farmacia_Id");

                    b.Property<DateTime>("FechaContratacion")
                        .HasColumnType("DateTime")
                        .HasColumnName("FechaContratacion");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar")
                        .HasColumnName("Nombres");

                    b.Property<string>("Sueldo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("Sueldo");

                    b.HasKey("Id");

                    b.HasIndex("CargoId");

                    b.HasIndex("FarmaciaId");

                    b.ToTable("Empleado", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.EstadoCita", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdEstadoCita")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar")
                        .HasColumnName("NombreEstado");

                    b.HasKey("Id");

                    b.ToTable("EstadoCita", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Farmacia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdFarmacia")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("FechaInauguracion")
                        .HasColumnType("DateTime")
                        .HasColumnName("FechaInauguracion");

                    b.Property<string>("NombreFarmacia")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("NombreFarmacia");

                    b.Property<string>("NumeroContacto")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar")
                        .HasColumnName("NumeroContacto");

                    b.Property<string>("Propietario")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("Propietario");

                    b.Property<string>("URLSitioWeb")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("URLSitioWeb");

                    b.HasKey("Id");

                    b.ToTable("Farmacia", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.FormulaMedica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdFormulaMedica")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DuracionTratamiento")
                        .HasColumnType("int")
                        .HasColumnName("DuracionTratamiento");

                    b.Property<DateTime>("FechaPrescripcion")
                        .HasColumnType("DateTime")
                        .HasColumnName("FechaPrescripcion");

                    b.Property<string>("Indicaciones")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("Indicaciones");

                    b.Property<int>("MedicoId")
                        .HasColumnType("int")
                        .HasColumnName("Medico_Id");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int")
                        .HasColumnName("Paciente_Id");

                    b.Property<string>("Posologia")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("Posologia");

                    b.HasKey("Id");

                    b.HasIndex("MedicoId");

                    b.HasIndex("PacienteId");

                    b.ToTable("FormulaMedica", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.FormulaMedicamentos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdFormulaMedicamentos")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FomulaMedicaId")
                        .HasColumnType("int")
                        .HasColumnName("FomulaMedica_Id");

                    b.Property<int>("MedicamentoId")
                        .HasColumnType("int")
                        .HasColumnName("Medicamento_Id");

                    b.HasKey("Id");

                    b.HasIndex("FomulaMedicaId");

                    b.HasIndex("MedicamentoId");

                    b.ToTable("FormulaMedicamentos", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Genero", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdGenero")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar")
                        .HasColumnName("NombreGenero");

                    b.HasKey("Id");

                    b.ToTable("Genero", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.HistorialMedico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdHistorialMedico")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Diagnostico")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("Diagnostico");

                    b.Property<int>("MedicoId")
                        .HasColumnType("int")
                        .HasColumnName("Medico_Id");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("Observaciones");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int")
                        .HasColumnName("Paciente_Id");

                    b.Property<string>("Tratamiento")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("Tratamiento");

                    b.HasKey("Id");

                    b.HasIndex("MedicoId");

                    b.HasIndex("PacienteId");

                    b.ToTable("HistorialMedico", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Inventario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdInventario")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompraId")
                        .HasColumnType("int")
                        .HasColumnName("Compra_Id");

                    b.Property<int>("FarmaciaId")
                        .HasColumnType("int")
                        .HasColumnName("Farmacia_Id");

                    b.Property<int>("VentaId")
                        .HasColumnType("int")
                        .HasColumnName("Usuario_Id");

                    b.HasKey("Id");

                    b.HasIndex("CompraId");

                    b.HasIndex("FarmaciaId");

                    b.HasIndex("VentaId");

                    b.ToTable("Inventario", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Medicamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdMedicamento")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int")
                        .HasColumnName("CategoriaMedicamento_Id");

                    b.Property<DateTime>("FechaExpiracion")
                        .HasColumnType("DateTime")
                        .HasColumnName("FechaExpiracion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("NombreMedicamento");

                    b.Property<int>("PresentacionId")
                        .HasColumnType("int")
                        .HasColumnName("PresentacionMedicamento_Id");

                    b.Property<int>("ProveedorId")
                        .HasColumnType("int")
                        .HasColumnName("Proveedor_Id");

                    b.Property<int>("TipoId")
                        .HasColumnType("int")
                        .HasColumnName("TipoMedicamento_Id");

                    b.Property<long>("ValorUnidad")
                        .HasColumnType("BIGINT")
                        .HasColumnName("ValorUnidad");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("PresentacionId");

                    b.HasIndex("ProveedorId");

                    b.HasIndex("TipoId");

                    b.ToTable("Medicamento", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.MedicamentosComprados", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdMedicamentosComprados")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CantidadCompra")
                        .HasColumnType("int")
                        .HasColumnName("CantidadCompra");

                    b.Property<int>("CompraId")
                        .HasColumnType("int")
                        .HasColumnName("Compra_Id");

                    b.Property<int>("MedicamentoId")
                        .HasColumnType("int")
                        .HasColumnName("Medico_Id");

                    b.Property<long>("ValorTotalCompra")
                        .HasColumnType("BIGINT")
                        .HasColumnName("ValorTotalCompra");

                    b.HasKey("Id");

                    b.HasIndex("CompraId");

                    b.HasIndex("MedicamentoId");

                    b.ToTable("MedicamentosComprados", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.MedicamentosVendidos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdMedicamentosVendidos")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CantidadVendida")
                        .HasColumnType("int")
                        .HasColumnName("CantidadVendida");

                    b.Property<int>("MedicamentoId")
                        .HasColumnType("int")
                        .HasColumnName("Medicamento_Id");

                    b.Property<long>("ValorTotalVenta")
                        .HasColumnType("BIGINT")
                        .HasColumnName("ValorTotalVenta");

                    b.Property<int>("VentaId")
                        .HasColumnType("int")
                        .HasColumnName("Venta_Id");

                    b.HasKey("Id");

                    b.HasIndex("MedicamentoId");

                    b.HasIndex("VentaId");

                    b.ToTable("MedicamentosVendidos", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.MetodoDePago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdMetodoDePago")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar")
                        .HasColumnName("NombreMetodo");

                    b.HasKey("Id");

                    b.ToTable("MetodoDePago", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Paciente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdPaciente")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("Apellidos");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("DateTime")
                        .HasColumnName("FechaNacimiento");

                    b.Property<int>("GeneroId")
                        .HasColumnType("int")
                        .HasColumnName("Genero_Id");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("Nombres");

                    b.Property<string>("NumeroContacto")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("NroContacto");

                    b.HasKey("Id");

                    b.HasIndex("GeneroId");

                    b.ToTable("Paciente", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Pais", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdPais")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("NombrePais");

                    b.HasKey("Id");

                    b.ToTable("Pais", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Presentacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdPresentacion")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("Descripcion");

                    b.HasKey("Id");

                    b.ToTable("Presentacion", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Proveedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdProveedor")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("Apellidos");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("Nombres");

                    b.Property<string>("NumeroContacto")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("NroContacto");

                    b.HasKey("Id");

                    b.ToTable("Proveedor", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Token")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Rol")
                        .HasAnnotation("MySqlValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("NombreRol");

                    b.HasKey("Id");

                    b.ToTable("Rol", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.TipoDireccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdTipoDireccion")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar")
                        .HasColumnName("NombreDireccion");

                    b.HasKey("Id");

                    b.ToTable("TipoDireccion", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.TipoMedicamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdTipoMedicamento")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar")
                        .HasColumnName("NombreTipo");

                    b.HasKey("Id");

                    b.ToTable("TipoMedicamento", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.TipoVia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdTipoVia")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abreviatura")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar")
                        .HasColumnName("Abreviatura");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar")
                        .HasColumnName("NombreTipoVia");

                    b.HasKey("Id");

                    b.ToTable("TipoVia", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Usuario")
                        .HasAnnotation("MySqlValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("Email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("Password");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("Username");

                    b.HasKey("Id");

                    b.ToTable("Usuario", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.UsuarioRol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_UsuarioRol")
                        .HasAnnotation("MySqlValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RolId")
                        .HasColumnType("int")
                        .HasColumnName("Rol_Id");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("Usuario_Id");

                    b.HasKey("Id");

                    b.HasIndex("RolId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("UsuarioRol", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Venta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdVenta")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClienteId")
                        .HasColumnType("int")
                        .HasColumnName("Cliente_Id");

                    b.Property<DateTime>("FechaVenta")
                        .HasColumnType("DateTime")
                        .HasColumnName("FechaVenta");

                    b.Property<int>("MetodoDePagoId")
                        .HasColumnType("int")
                        .HasColumnName("MetodoDePago_Id");

                    b.Property<long>("NumeroFactura")
                        .HasColumnType("BIGINT")
                        .HasColumnName("NumeroFactura");

                    b.Property<int>("VentaEmpleadoId")
                        .HasColumnType("int")
                        .HasColumnName("VentaEmpleado_Id");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("MetodoDePagoId");

                    b.HasIndex("VentaEmpleadoId");

                    b.ToTable("Venta", (string)null);
                });

            modelBuilder.Entity("RolUsuario", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.Property<int>("UsuariosId")
                        .HasColumnType("int");

                    b.HasKey("RolesId", "UsuariosId");

                    b.HasIndex("UsuariosId");

                    b.ToTable("RolUsuario");
                });

            modelBuilder.Entity("Dominio.Entities.Cita", b =>
                {
                    b.HasOne("Dominio.Entities.EstadoCita", "EstadoCitas")
                        .WithMany("Citas")
                        .HasForeignKey("EstadoCitaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Empleado", "Empleados")
                        .WithMany("Citas")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Usuario", "Usuarios")
                        .WithMany("Citas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empleados");

                    b.Navigation("EstadoCitas");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Dominio.Entities.Ciudad", b =>
                {
                    b.HasOne("Dominio.Entities.Departamento", "Departamentos")
                        .WithMany("Ciudades")
                        .HasForeignKey("DepartamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departamentos");
                });

            modelBuilder.Entity("Dominio.Entities.Compra", b =>
                {
                    b.HasOne("Dominio.Entities.MetodoDePago", "MetodosDePagos")
                        .WithMany("Compras")
                        .HasForeignKey("MetodoDePagoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Proveedor", "Proveedores")
                        .WithMany("Compras")
                        .HasForeignKey("ProveedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MetodosDePagos");

                    b.Navigation("Proveedores");
                });

            modelBuilder.Entity("Dominio.Entities.Departamento", b =>
                {
                    b.HasOne("Dominio.Entities.Pais", "Paises")
                        .WithMany("Departamentos")
                        .HasForeignKey("PaisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paises");
                });

            modelBuilder.Entity("Dominio.Entities.Direccion", b =>
                {
                    b.HasOne("Dominio.Entities.Ciudad", "Ciudades")
                        .WithMany("Direcciones")
                        .HasForeignKey("FarmaciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Farmacia", "Farmacias")
                        .WithMany("Direcciones")
                        .HasForeignKey("FarmaciasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.TipoDireccion", "TipoDirecciones")
                        .WithMany("Direcciones")
                        .HasForeignKey("TipoDireccionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.TipoVia", "TipoVias")
                        .WithMany("Direcciones")
                        .HasForeignKey("TipoViaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ciudades");

                    b.Navigation("Farmacias");

                    b.Navigation("TipoDirecciones");

                    b.Navigation("TipoVias");
                });

            modelBuilder.Entity("Dominio.Entities.Empleado", b =>
                {
                    b.HasOne("Dominio.Entities.CargoEmpleado", "Cargos")
                        .WithMany("Empleados")
                        .HasForeignKey("CargoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Farmacia", "Farmacias")
                        .WithMany("Empleados")
                        .HasForeignKey("FarmaciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cargos");

                    b.Navigation("Farmacias");
                });

            modelBuilder.Entity("Dominio.Entities.FormulaMedica", b =>
                {
                    b.HasOne("Dominio.Entities.Empleado", "Empleados")
                        .WithMany("FormulasMedicas")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Paciente", "Pacientes")
                        .WithMany("FormulasMedicas")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empleados");

                    b.Navigation("Pacientes");
                });

            modelBuilder.Entity("Dominio.Entities.FormulaMedicamentos", b =>
                {
                    b.HasOne("Dominio.Entities.FormulaMedica", "FormulasMedicas")
                        .WithMany("FormulaMedicamentos")
                        .HasForeignKey("FomulaMedicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Medicamento", "Medicamentos")
                        .WithMany("FormulaMedicamentos")
                        .HasForeignKey("MedicamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormulasMedicas");

                    b.Navigation("Medicamentos");
                });

            modelBuilder.Entity("Dominio.Entities.HistorialMedico", b =>
                {
                    b.HasOne("Dominio.Entities.Empleado", "Empleados")
                        .WithMany("HistorialesMedicos")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Paciente", "Pacientes")
                        .WithMany("HistorialesMedicos")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empleados");

                    b.Navigation("Pacientes");
                });

            modelBuilder.Entity("Dominio.Entities.Inventario", b =>
                {
                    b.HasOne("Dominio.Entities.Compra", "Compras")
                        .WithMany("Inventarios")
                        .HasForeignKey("CompraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Farmacia", "Farmacias")
                        .WithMany("Inventarios")
                        .HasForeignKey("FarmaciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Venta", "Ventas")
                        .WithMany("Inventarios")
                        .HasForeignKey("VentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Compras");

                    b.Navigation("Farmacias");

                    b.Navigation("Ventas");
                });

            modelBuilder.Entity("Dominio.Entities.Medicamento", b =>
                {
                    b.HasOne("Dominio.Entities.CategoriaMedicamento", "Categorias")
                        .WithMany("Medicamentos")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Presentacion", "Presentaciones")
                        .WithMany("Medicamentos")
                        .HasForeignKey("PresentacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Proveedor", "Proveedores")
                        .WithMany("Medicamentos")
                        .HasForeignKey("ProveedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.TipoMedicamento", "Tipos")
                        .WithMany("Medicamentos")
                        .HasForeignKey("TipoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categorias");

                    b.Navigation("Presentaciones");

                    b.Navigation("Proveedores");

                    b.Navigation("Tipos");
                });

            modelBuilder.Entity("Dominio.Entities.MedicamentosComprados", b =>
                {
                    b.HasOne("Dominio.Entities.Compra", "Compras")
                        .WithMany("MedicamentosComprados")
                        .HasForeignKey("CompraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Medicamento", "Medicamentos")
                        .WithMany("MedicamentosComprados")
                        .HasForeignKey("MedicamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Compras");

                    b.Navigation("Medicamentos");
                });

            modelBuilder.Entity("Dominio.Entities.MedicamentosVendidos", b =>
                {
                    b.HasOne("Dominio.Entities.Medicamento", "Medicamentos")
                        .WithMany("MedicamentosVendidos")
                        .HasForeignKey("MedicamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Venta", "Ventas")
                        .WithMany("MedicamentosVendidos")
                        .HasForeignKey("VentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicamentos");

                    b.Navigation("Ventas");
                });

            modelBuilder.Entity("Dominio.Entities.Paciente", b =>
                {
                    b.HasOne("Dominio.Entities.Genero", "Generos")
                        .WithMany("Pacientes")
                        .HasForeignKey("GeneroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Generos");
                });

            modelBuilder.Entity("Dominio.Entities.RefreshToken", b =>
                {
                    b.HasOne("Dominio.Entities.Usuario", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dominio.Entities.UsuarioRol", b =>
                {
                    b.HasOne("Dominio.Entities.Rol", "Roles")
                        .WithMany("UsuarioRoles")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Usuario", "Usuarios")
                        .WithMany("UsuarioRoles")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Roles");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Dominio.Entities.Venta", b =>
                {
                    b.HasOne("Dominio.Entities.Usuario", "Usuarios")
                        .WithMany("Ventas")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.MetodoDePago", "MetodosDePagos")
                        .WithMany("Ventas")
                        .HasForeignKey("MetodoDePagoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Empleado", "Empleados")
                        .WithMany("Ventas")
                        .HasForeignKey("VentaEmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empleados");

                    b.Navigation("MetodosDePagos");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("RolUsuario", b =>
                {
                    b.HasOne("Dominio.Entities.Rol", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UsuariosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dominio.Entities.CargoEmpleado", b =>
                {
                    b.Navigation("Empleados");
                });

            modelBuilder.Entity("Dominio.Entities.CategoriaMedicamento", b =>
                {
                    b.Navigation("Medicamentos");
                });

            modelBuilder.Entity("Dominio.Entities.Ciudad", b =>
                {
                    b.Navigation("Direcciones");
                });

            modelBuilder.Entity("Dominio.Entities.Compra", b =>
                {
                    b.Navigation("Inventarios");

                    b.Navigation("MedicamentosComprados");
                });

            modelBuilder.Entity("Dominio.Entities.Departamento", b =>
                {
                    b.Navigation("Ciudades");
                });

            modelBuilder.Entity("Dominio.Entities.Empleado", b =>
                {
                    b.Navigation("Citas");

                    b.Navigation("FormulasMedicas");

                    b.Navigation("HistorialesMedicos");

                    b.Navigation("Ventas");
                });

            modelBuilder.Entity("Dominio.Entities.EstadoCita", b =>
                {
                    b.Navigation("Citas");
                });

            modelBuilder.Entity("Dominio.Entities.Farmacia", b =>
                {
                    b.Navigation("Direcciones");

                    b.Navigation("Empleados");

                    b.Navigation("Inventarios");
                });

            modelBuilder.Entity("Dominio.Entities.FormulaMedica", b =>
                {
                    b.Navigation("FormulaMedicamentos");
                });

            modelBuilder.Entity("Dominio.Entities.Genero", b =>
                {
                    b.Navigation("Pacientes");
                });

            modelBuilder.Entity("Dominio.Entities.Medicamento", b =>
                {
                    b.Navigation("FormulaMedicamentos");

                    b.Navigation("MedicamentosComprados");

                    b.Navigation("MedicamentosVendidos");
                });

            modelBuilder.Entity("Dominio.Entities.MetodoDePago", b =>
                {
                    b.Navigation("Compras");

                    b.Navigation("Ventas");
                });

            modelBuilder.Entity("Dominio.Entities.Paciente", b =>
                {
                    b.Navigation("FormulasMedicas");

                    b.Navigation("HistorialesMedicos");
                });

            modelBuilder.Entity("Dominio.Entities.Pais", b =>
                {
                    b.Navigation("Departamentos");
                });

            modelBuilder.Entity("Dominio.Entities.Presentacion", b =>
                {
                    b.Navigation("Medicamentos");
                });

            modelBuilder.Entity("Dominio.Entities.Proveedor", b =>
                {
                    b.Navigation("Compras");

                    b.Navigation("Medicamentos");
                });

            modelBuilder.Entity("Dominio.Entities.Rol", b =>
                {
                    b.Navigation("UsuarioRoles");
                });

            modelBuilder.Entity("Dominio.Entities.TipoDireccion", b =>
                {
                    b.Navigation("Direcciones");
                });

            modelBuilder.Entity("Dominio.Entities.TipoMedicamento", b =>
                {
                    b.Navigation("Medicamentos");
                });

            modelBuilder.Entity("Dominio.Entities.TipoVia", b =>
                {
                    b.Navigation("Direcciones");
                });

            modelBuilder.Entity("Dominio.Entities.Usuario", b =>
                {
                    b.Navigation("Citas");

                    b.Navigation("RefreshTokens");

                    b.Navigation("UsuarioRoles");

                    b.Navigation("Ventas");
                });

            modelBuilder.Entity("Dominio.Entities.Venta", b =>
                {
                    b.Navigation("Inventarios");

                    b.Navigation("MedicamentosVendidos");
                });
#pragma warning restore 612, 618
        }
    }
}
